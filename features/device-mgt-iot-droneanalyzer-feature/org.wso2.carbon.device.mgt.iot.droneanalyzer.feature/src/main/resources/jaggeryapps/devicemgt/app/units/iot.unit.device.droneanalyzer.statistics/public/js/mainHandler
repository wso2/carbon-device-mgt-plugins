/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

object_maker.init(config_api.config_3dobject_holder, $("#objectHolder").width(), $("#objectHolder").width()/2);
object_maker.animate();
var flight_dynamics = new flight_dynamics();
$("#window_size").slider({
    range: "min",
    value: 37,
    min: 10,
    max: 300,
    slide: function (event, ui) {
        $("#window_size_current_value").html($("#window_size").slider("value"));

    }
});
$("#window_update").slider({
    range: "min",
    value: 234,
    min: 100,
    max: 1000,
    slide: function (event, ui) {
        $("#window_update_value").html($("#window_update").slider("value"));
    }
});
$("#replotting").click(function () {
    plotting.finishPlotting(function (status) {
        if (status) {
            plotting.initPlotting(function (status) {
                d3.select("#realtimechart").select("svg").remove();
                plotting.realtime_plotting("#realtimechart", "#range_min", "#range_max", "#window_update_value",
                    600, $("#realtimechart").height(), "#window_size_current_value",
                    '#plotting_attribute');
            });
        } else {
            $("#realtimechart").html("There is no data to plot");
        }
    });
});
$('.btn-minimize').click(function (e) {
    e.preventDefault();
    var $target = $(this).parent().parent().next('.box-content');
    if ($target.is(':visible')) {
        if ($(this).parent().attr('id') === "RealtimePlotting") {
            plotting.forceToRedraw(function (status) {

                d3.select("#realtimechart").select("svg").remove();
                plotting.realtime_plotting("#realtimechart", "#range_min", "#range_max", "#window_update_value",
                    600, $("#realtimechart").height(), "#window_size_current_value",
                    '#plotting_attribute');
            });
        }
    } else {
    }
});
$('#connectionOpen').on('click', function () {
    $('#connectionOpen').toggleClass('active');
});


$("#xmppConnectionOpen").on('click', function () {
    $('#xmppConnectionOpen').toggleClass('active');
    if ($('#xmppConnectionOpen').html() === "Start") {
        sendMessage();
        $('#xmppConnectionOpen').html("Stop");
    } else if ($('#xmppConnectionOpen').html() === "Stop") {
        closeSocket();
        $('#xmppConnectionOpen').html("Start");
        $("#connectionOpen").html("Connect to server").removeClass("btn btn-info").addClass("btn btn-primary");
    }
});

$('.btn-minimize').parent().parent().next('.box-content').hide();


var webSocket;
config_api.realtime_plotting_data_window["attitude"] = new Queue();

var current_status = {};

function openSocket() {
    if (webSocket !== undefined && webSocket.readyState !== WebSocket.CLOSED) {
        writeResponse("WebSocket is already opened.");
    } else {
        webSocket = new WebSocket(config_api.web_socket_endpoint);
    }
    webSocket.onopen = function (event) {
        if (event === undefined) {
            writeResponse("WebSocket cant open " + event);
            $("#connectionOpen").html("Connect to server").removeClass("btn btn-info").addClass("btn btn-primary");
        } else {

            if (event["isTrusted"] == true) {
                $("#connectionOpen").html("Connected").removeClass("btn btn-primary").addClass("btn btn-info");
            }
            writeResponse(JSON.stringify(event));

        }
    };
    webSocket.onmessage = function (event) {
        var sender_message = event.data;
        sender_message = isJSON(sender_message);
        if (sender_message != null) {
            flight_dynamics.processingMessage(sender_message);
        } else {
            writeResponse("Message has been corrupted.");
        }
    };

}

function sendMessage(message) {
    webSocket.send(message);
}

function closeSocket() {
    webSocket.close();
}

function writeResponse(text) {
    console.log(text);
}

window.onbeforeunload = function () {
    webSocket.onclose = function () {
    };
    webSocket.close()
};

