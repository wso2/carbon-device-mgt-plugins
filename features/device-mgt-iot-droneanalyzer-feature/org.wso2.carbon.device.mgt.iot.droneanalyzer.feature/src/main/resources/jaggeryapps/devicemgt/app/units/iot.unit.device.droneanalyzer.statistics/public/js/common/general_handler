
    $('.btn-minimize').click(function (e) {
        e.preventDefault();
        var $target = $(this).parent().parent().next('.box-content');
        if ($target.is(':visible')) {
            $('i', $(this)).removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
            checkAndDisable($(this).parent().attr('id'));

        }
        else {
            $('i', $(this)).removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
            checkAndEnable($(this).parent().attr('id'));
        }
        $target.slideToggle();
    });

    function checkAndEnable(id){

        console.log("enable: "+id);
        if(id === "RealtimePlotting"){
            config_api.modules_status.realtimePlotting = true;
        }
        else if(id === "SensorReadings"){
            config_api.modules_status.sensorReadings = true;
        }else if(id === "AngleOfRotation_2"){
            config_api.modules_status.angleOfRotation_2 = true;
        }else if(id === "AngleOfRotation_1"){
            config_api.modules_status.angleOfRotation_1 = true;
        }
    }

    function checkAndDisable(id){
        console.log("disable: "+id);
        if(id === "RealtimePlotting"){
            config_api.modules_status.realtimePlotting = false;
        }
        else if(id === "SensorReadings"){
            config_api.modules_status.sensorReadings = false;
        }else if(id === "AngleOfRotation_2"){
            config_api.modules_status.angleOfRotation_2 = false;
        }else if(id === "AngleOfRotation_1"){
            config_api.modules_status.angleOfRotation_1 = false;
        }
    }
//[i, data[i]]
    function isJSON(data){
        try{
            return JSON.parse(data);
        }
        catch (error){
            return null;
        }
    }

    function Queue(){
        var a=[],b='';
        this.enqueue=function(b){
            a.push([this.getLength()-1<=0? 0: this.getLength()-1 , b]);
        };
        this.dequeue=function(){
            if(0!=a.length){
                var c=a[b];
                2*++b>=a.length&&(a=a.slice(b),b=0);
                return c}
        };
        this.getLength=function(){
            return a.length-b;
        };
        this.isEmpty=function(){
            return 0==a.length;
        };

        this.peek=function(){
            return 0<a.length?a[b]:void 0};
        this.getData = function(){
            return a;
        };
        this.make_fixed_size = function(start, end){
            a= a.slice(start, end);
        }
    }

