<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var log = new Log("/app/modules/enrollments/ios/agent-enroll.jag");

var mdmProps = require("/app/modules/conf-reader/main.js")["conf"];
var UAParser = require("/app/modules/ua-parser.min.js")["UAParser"];

var parser = new UAParser();
var userAgent = request.getHeader("User-Agent");
parser.setUA(userAgent);
parser.getResult();
var os = parser.getOS();
var platform = os.name;

if (platform != "iOS") {
    response.sendRedirect(mdmProps["appContext"] + "enrollments/error/unintentional-request");
} else if (session.get("lastAccessedPage") != "license-agent") {
    response.sendRedirect(mdmProps["appContext"] + "enrollments/error/unintentional-request");
} else {
    var authenticatedUser = session.get("authenticatedUser");
    if (!authenticatedUser) {
        response.sendRedirect(mdmProps["appContext"] + "enrollments/error/unintentional-request");
    } else {
        var HttpClient = Packages.org.apache.commons.httpclient.HttpClient;
        var PostMethod = Packages.org.apache.commons.httpclient.methods.PostMethod;
        var Header = Packages.org.apache.commons.httpclient.Header;
        var StringRequestEntity = Packages.org.apache.commons.httpclient.methods.StringRequestEntity;
        var ByteArrayInputStream = Packages.java.io.ByteArrayInputStream;

        var client = new HttpClient();
        var enrollUrl = mdmProps["iOSConfigRoot"] + "enroll";
        var method = new PostMethod(enrollUrl);
        var header =  new Header();

        header.setName("Content-Type");
        header.setValue("application/json");
        method.addRequestHeader(header);

        var username = authenticatedUser;
        var password = session.get("authenticatedUserPassword");
        var tenantDomain = session.get("authenticatedUserDomain");
        var challengeToken = session.get("iOSChallengeToken");

        var inputs = {"username": username, "password": password, "challengeToken": challengeToken, "tenantDomain": tenantDomain};
        var stringRequestEntity = new StringRequestEntity(stringify(inputs));
        method.setRequestEntity(stringRequestEntity);
        try {
            client.executeMethod(method);
            var status = method.getStatusCode();
            if (status == 200) {
                session.put("enrolledUser", authenticatedUser);
                var stream = method.getResponseBody();
                var byteArrayInputStream = new ByteArrayInputStream(stream);
                response.contentType = "application/x-apple-aspen-config";
                print(new Stream(byteArrayInputStream));
            } else {
                // two visible possibilities would be server sending 401 and 500
                response.sendRedirect(mdmProps["appContext"] + "enrollments/ios/login-agent?error=unexpected");
            }
        } catch (e) {
            log.error("Error occurred in enrolling ios device", e);
            response.sendRedirect(mdmProps["appContext"] + "enrollments/ios/login-agent?error=unexpected");
        } finally {
            method.releaseConnection();
        }
    }
}
%>
